-----------------------------
Статистический член класса

Если в определении класса объявлен статистический член, программа создает лишь одну копию данной переменной для всех объектов класса.

Для статистического члена класса инициализация осуществляется отдельным оператором вне объявления класса.

Оператор инициализации задает тип и указывает область действия данной переменной. Инициализация метода описывается в файле методов.
(Если поместить инициализация в заголовочном файле, там же, где определяется класс, то множественное включение одного и того же
заголовочного файла в другие файлы повлечет за собой ошибочное выполнение инициализации одной и той же переменной несколько раз).
(Константный статистический член класса можно (необходимо) инициализировать при объявлении данного члена. Проблема множественного 
включения не будет распространятся на данный член, так как модификатор const оказывает специфическое воздействие на поведение данного члена).
-----------------------------
Конструкторы по умолчанию

Если для класса не задан никакой конструктор, с++ предоставляет конструктор по умолчанию.

Если для класса определен какой-либо конструктор, то компилятор уже не предоставляет конструктор по умолчанию. 
Таким образом, если определенный прораммистом конструктор не инициализирует все необходимые данные-члены 
или же вручную не определен конструктор по умолчанию, то инициализировать объект неявно не получится.

Конструктор по умолчанию может быть определен лишь один раз. В противном случае это ведет к неоднозначности. 
-----------------------------
Конструкторы копирования

Служит для копирования некоторого объекта в создаваемый объект, то есть используется во время инициализации, а также при передаче функции
аргумента по значению и возврата такого аргумента. Обычно, имеет вид className(const className&).

Конструктор копирования по умолчанию выполняет поверхностное копирование (почленное копирование нестатических членов).
-----------------------------
Конструктор присваивания
Подобно тому, как ANSI C разрешает присваивание структур, C++ допускает присваивание объектов класса.
Это осуществляется за счет автоматической перегрузки операции присваивания, перегрузка выглядит следующим образом:
ClassName &operator=(const ClassName &);
Перегруженная операция присваивания срабатывает присваивании одного объекта другому существующему объекту.
При инициализации объекта, операция присваивания не обязательна.
-----------------------------
Важная пометка!
Если при почленном присваивании в качестве одного из данных членов пристутствует объект, то программа использует
операцию присваивания, определенную для класса данного объекта.
-----------------------------
Перегрузка операции присваивания
При реализации прегрузки операции присваивания для объектов, необходимо учесть следующие факторы:
Функция перегрузки должна возвращать ссылку на объект,
Целевой объект может ссылаться на данные, для которых ранее (например при создании данного объекта)
уже была распределена память, поэтому при наличии такового, в функции перегрузки присваивания необходимо использовать 
операцию  delete[].
Функция должна содержать защиту от присваивания объекта самому себе, по причине реализации предыдущего пункта.
-----------------------------
Примечание:
Создание дружественных функций сравнения (не функции члены класса) облегчают сравнение объектов String и строк в стиле C.
Пометка:
Функция strcmp, принимает два аргумента типа "строка", возвращает положительное значение, если первый аргумент
имеет большее значение чем второй (см. механику сравнения строк - по табличному коду). Возвращает отрицательное
значение, если второй агрумент больше чем первый, возвращает нуль, если оба аргумента равны.
-----------------------------
Перегрузка символа "квадратные скобки для осуществилния возможности скобочной нотации".
Перегрузка осуществляется с помощью оператора operator[] (int i), в качестве возвращаемого типа данного оператора
можно задать ссылку на char, тогда это значение будет являться в точности соотвествующим символом исходной строки.
Таким образом, можно получать данные к закрытому члену класса.
Добавление модификаторов const, создавая еще один аналогичный оператор, позволит получить доступ для чтения 
к константным объектам, а также доступ для чтения и записи к обычным объектам.
-----------------------------
Статические функции-члены класса
Функцию член можно объявить как статическую, ключевое слово static должно присутствовать только в объявлении.
Статическая функция член не получает указатель this, ее не обязательно вызывать через объект. Ее можно вызвать
с помощью имени класса и операции разрешения контекста.
Так как статическая функция не связана с каким-либо конкретным объектом, она может работать
только со статическими членами класса.
-----------------------------
Важное замечание:
В классе может имется множество различных конструторов, но деструктор всегда один. Таким образом, все конструкторы
должны единобразно использовать операцию new (со скобками или без). Для указателя, инициализированного в занчение
nullptr (NULL) допустимо использовать оба вида операции delete.
